---
import BaseHead from '@components/BaseHead.astro';
import BlogTag from '@components/blog/BlogTag.astro';
import LikeButton from '@components/blog/LikeButton.astro';
import TableOfContent from '@components/blog/TableOfContent.astro';
import CustomPageTitle from '@components/CustomPageTitle.astro';
import Footer from '@components/Footer.astro';
import FormattedDate from '@components/FormattedDate.astro';
import Navbar from '@components/Navbar.astro';
import '@fontsource-variable/inter';
import { Icon } from 'astro-icon/components';
import type { CollectionEntry } from 'astro:content';

type Props = CollectionEntry<'blog'>['data'] & {
    headings: {
        depth: number;
        slug: string;
        text: string;
    }[];
    slug: string;
}

const { title, description, pubDate, updatedDate, tags, headings, duration, likes, slug } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
	</head>
	<body>
		<Navbar />
        <main>
            <article>
                <img src="/assets/radial_pattern_bg.svg" alt="Radial Bg" class="absolute top-0 left-0 opacity-30 z-[-1]" />
                <div class="flex flex-col px-20 py-24 relative">
                    <CustomPageTitle textSize="text-[4.5rem]" title={title} />
                    <div class="flex">
                        <div class="flex flex-col">
                            <div class="flex flex-col space-y-16">
                                <p class="text-[#F6F6F6] font-light text-lg pr-7">{description}</p>
                                <div class="flex items-center">
                                    <div class="pr-7 border-r-[0.5px] border-r-white">
                                        <FormattedDate date={pubDate} />
                                    </div>
                                    <span class="px-7">
                                        <p class="text-[#F6F6F6] font-light text-xs">{duration}</p>
                                    </span>
                                    {updatedDate && (
                                        <div class="last-updated-on">
                                            Last updated on <FormattedDate date={updatedDate} />
                                        </div>
                                    )}
                                </div>
                            </div>
                            <div class="flex flex-col mt-5 p-4 border border-[#272727] rounded-md max-w-[850px]">
                                <p class="text-white font-light text-base pr-7">Topics</p>
                                <div class="flex space-x-4 mt-3 w-fit">
                                    {tags.map((tag) => (
                                        <BlogTag tags={tag} />
                                    ))}
                                </div>
                            </div>
                            <div class="blog-body">
                                <slot />
                            </div>
                        </div>
                        <div class="flex flex-col items-center pl-32 pt-32 w-fit">
                            {headings.length > 0 && <TableOfContent headings={headings} />}
                        </div>
                    </div>
                </div>
                <div class="flex p-3 items-center space-x-3">
                    <LikeButton likes={likes} slug={slug} />
                </div>
            </article>
        </main>
		<Footer />
	</body>
</html>
<style is:global>
    html {
        font-family: 'Inter Variable', sans-serif;
        scroll-behavior: smooth;
    }

    body {
        background-color: #161616;
        word-wrap: break-word;
        overflow-wrap: break-word;
        line-height: 1.7;
    }

    h1 {
        font-size: 3.052em;
    }

    h2 {
        font-size: 2.441em;
    }

    h3 {
        font-size: 1.953em;
    }

    h4 {
        font-size: 1.563em;
    }

    h5 {
        font-size: 1.25em;
    }

    h6 {
        font-size: 1em;
    }

    h1, h2, h3, h4, h5, h6 {
        font-weight: 600;
        color: #ffffff;
        position: relative;
    }

    .blog-body {
        color: #83868A;
        padding-top: 2em;
        text-align: justify;
    }

    .icon-button.shrink {
        transform: scale(0.9);
        transition: transform 0.2s ease;
    }

    .heart-fly-animation {
        position: relative;
        overflow: visible;
        width: 0;
        height: 0;
    }

    .flying-heart {
        position: absolute;
        left: 50%;
        top: 50%;
        width: 16px;
        height: 16px;
        background-color: red;
        mask: url('/assets/icons/heart_logo.svg') no-repeat center / contain;
        -webkit-mask: url('/assets/icons/heart_logo.svg') no-repeat center / contain;
        animation: fly-up 1s ease-in-out forwards;
    }

    @keyframes fly-up {
        0% {
            transform: translate(-50%, 0) scale(1);
            opacity: 1;
        }
        50% {
            transform: translate(-50%, -50%) scale(1.2);
            opacity: 0.7;
        }
        100% {
            transform: translate(-50%, -100px) scale(0.8);
            opacity: 0;
        }
    }
</style>
<script>
    // const iconButton = document.querySelector('.icon-button');
    // const likesCount = document.querySelector('.likes-count');
    // const heartFlyContainer = document.querySelector('.heart-fly-animation');
    // let likes = parseInt(likesCount?.getAttribute('data-likes') || '0');

    // if (iconButton && likesCount && heartFlyContainer) {
    //     iconButton.addEventListener('click', () => {
    //         likes++;
    //         likesCount.textContent = `${likes} Likes`;
    //         likesCount.setAttribute('data-likes', likes.toString());

    //         iconButton.classList.add('shrink');
    //         setTimeout(() => {
    //             iconButton.classList.remove('shrink');
    //         }, 200);

    //         const flyingHeart = document.createElement('div');
    //         flyingHeart.classList.add('flying-heart');
    //         heartFlyContainer.appendChild(flyingHeart);

    //         flyingHeart.addEventListener('animationend', () => {
    //             flyingHeart.remove();
    //         });
    //     })
    // }
</script>

