---
import { eq } from 'astro:db';
import { PostLikes } from 'astro:db';
import { db } from 'astro:db';

interface Props {
  slug: string;
}

type LikesRecord = {
  id: number;
  likes: number;
  slug: string;
}[];

const { slug } = Astro.props;

let likesRecord: LikesRecord = await db
  .select()
  .from(PostLikes)
  .where(eq(PostLikes.slug, slug));

let likesCount = 0;

if (likesRecord.length > 0) {
  likesCount = likesRecord[0].likes;
} else {
  await db.insert(PostLikes).values({ slug, likes: 0 });
  likesRecord = [{ id: 0, slug, likes: 0 }];
}
---

<div class="flex items-center gap-2">
  <button
    id="like-button"
    class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-full transition-colors"
    data-slug={slug}
    data-likes={likesCount}
  >
    ❤️ {likesCount} likes
  </button>
</div>

<script>
  const button = document.getElementById('like-button');
  if (button) {
    button.addEventListener('click', async () => {
      const slug = button.dataset.slug;

      try {
        const response = await fetch('/api/likes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ slug }),
        });

        if (response.ok) {
          const { likes } = await response.json();
          button.textContent = `❤️ ${likes} likes`;
          button.dataset.likes = likes.toString();
        } else {
          console.error('Failed to update likes:', await response.text());
        }
      } catch (error) {
        console.error('Error while liking:', error);
      }
    });
  }
</script>
